SGA - String Graph Assembler

SGA is a genome assembler based on Gene Myers' string graph assembly framework. It uses
the FM-index/BWT to efficiently find overlaps between sequence reads as described here:

http://bioinformatics.oxfordjournals.org/cgi/content/abstract/26/12/i367

*** Compiling SGA

SGA requires:
    -google sparse hash library (http://code.google.com/p/google-sparsehash/)
    -zlib (http://www.zlib.net/)

If these libraries are installed, to compile SGA first run configure then make:

./configure
./make

The path to the sparse hash library can be specified as follows:

./configure CPPFLAGS=-I/home/jsimpson/include

Running make install will install sga into /usr/local/bin/ by default. To specify the install
location use the --prefix option to configure:

./configure --prefix=/home/jsimpson/ && make && make install

This command would copy sga to /home/jsimpson/bin/sga

*** Running SGA

SGA is made up of a number of subprograms, together which make up the assembly pipeline. Each program and
subprogram will print a brief description and its usage info if the --help flag is used. For this command 
will print all the subprogram names and their commands.

sga --help

The major subprograms are:

* sga preprocess READS

Preprocess prepares a data file for assembly. It can perform optional quality filtering/trimming. By default
it will discard reads that have uncalled bases ('N' or '.'). If you wish to keep these reads, use the --permuteN 
flag which will randomly change any uncalled bases to one of [ACGT]. It is mandatory to run this command 
on real data. If you are using simulated data without uncalled bases, you do not need to run this command.
Refer to sga preprocess --help for more options and their use.

* sga index READS

Build the FM-index for READS. READS can be fasta or fastq. The -d option can be used to limit
the amount of memory consumed, at the cost of higher running time. See --help for more information.

* sga correct READS

Perform error correction on the sequences in READS. Many options exist for this command, refer to --help. 
By default, the corrected reads will be output to READS.ec.fa. This program is threaded.

* sga rmdup READS

Remove duplicated sequences from the READS file. This is useful for removing PCR/optical duplicates. 

* sga overlap -m N READS

Find overlaps between reads that will be used to construct the string graph. The -m parameter specifies
the minimum length of the overlaps to find.  This program is threaded. The output file is READS.asqg.gz 
by default.

* sga assemble READS.asqg.gz

Assemble takes the output of the overlap step and constructs contigs. The output is in contigs.fa by default.

*** Example usage

This is a walk-through of an example run of SGA. Suppose the reads are contained in a single file called 
reads.fastq. First, we preprocess the data:

sga preprocess -f4 reads.fastq > reads.pp.fastq

This command will discard any read that has more than 4 very-low quality bases and any read that has an uncalled
base. The output is placed in reads.pp.fastq and is ready to assemble.

sga index -d 2000000 -t 4 reads.pp.fastq

This command builds the FM-index. The -d parameter tells SGA to only construct the index for 2,000,000 reads
at a time, then merge the results together. The -t parameter tells SGA to use 4 threads when merging the indices
together.

sga correct -m 50 -e 0.05 -l 16 -t 4 reads.pp.fasta

This command performs error correction on the reads. Only reads that overlap by 50bp or more will be used
in the correction process (specified by -m). The maximum allowable edit distance between two overlapping 
reads is 5% (-e parameter). The -l parameter requires there to be a 16bp or more exact match between reads
to find an overlap. If this parameter is not set, all matches between reads within the -e/-m thresholds will
be found at the cost of computation time. The -t flag indicates that 4 threads should be used for the computation.

sga index reads.pp.ec.fa

After correction, we must build the FM-index for the corrected reads.

sga rmdup -e 0.02 -t 4 reads.pp.ec.fa

This command removes any duplicated/identical reads as they do not contribute to the string graph. The -e 
parameter indicates that to reads are considered to be identical if the edit distance is 2% of lower. Again,
4 threads will be used for the computation.

sga index reads.pp.ec.rmdup.fa

The corrected, de-duplicated reads must be indexed as well.

sga overlap -m 50 -e 0.0 -t 4 reads.pp.ec.rmdup.fa

This constructs the reads.pp.ec.rmdup.asqg.gz file which is used for the assembly. The parameters are similar
to sga correct, -m specifies the length of the minimum overlap and -e specifies the tolerable error rate. In this
case we used -e 0.0 which means we want exact matches only. The -m/-e parameters can have a large effect
on the assembly so it is worth trying different values.

sga assemble -r -t 10 -b 2 reads.pp.ec.rmdup.asqg.gz

Assemble the reads into contigs. The -r parameter turns on small-repeat resolution which can increase the length 
of the contigs by untangling repeats that are less than a read length. The -t parameter specifies that 10 rounds
of dead-end trimming should be performed to clean up the graph. The -b parameter specifies that two rounds of 
bubble removal should be performed. The constructed contigs will be placed in contigs.fa.

*** Data quality issues

Sequence assembly generally requires high quality data. It is worth assessing the quality of your reads
using tools like FastQC (http://www.bioinformatics.bbsrc.ac.uk/projects/fastqc/) to help guide the choice
of assembly parameters. Low-quality data should be filtered or trimmed.

Very highly-represented sequences (>1000X) can cause problems for SGA. This can happen when sequencing a virus
or when mitochondria contamination is present in the sequencing run. In these cases, it might be worth 
running an initial 'rmdup' step before error correction.

*** History 

The first SGA-related code check-in was August, 2009. The algorithms for directly constructing the string graph from
the FM-index were developed and implemented in the fall of 2009.  

*** Third party code

SGA uses Bentley and Sedgwick's multikey quicksort code that can be found here: http://www.cs.princeton.edu/~rs/strings/demo.c
It also uses zlib, the google sparse hash and gzstream by Deepak Bandyopadhyay and Lutz Kettner (see Thirdparty/README)

*** Credits

Written by Jared Simpson.
The algorithms were developed by Jared Simpson and Richard Durbin. 
